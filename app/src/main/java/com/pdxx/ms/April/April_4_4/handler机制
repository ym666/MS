handler     人（收发快递）
message     快递
messagequeue  快递仓库
looper  快递员

messagequeue属于looper ，looper不断循环调用loop方法从messagequeue中取得到message
//发送消息
handler.sendMessage------sendMessageDelayed---------sendMessageAtTime
//插入消息队列
--------enqueueMessage
//Looper.loop 从消息队列中取出message
//dispatchMessage 里面handlerMessage

创建message时 一般都用Message.obtain比较好

Handler handler = new Handler(new callback())
handler.sendMessage(Message.obtain)
handler.handlerMessage

handler内存泄漏

handler为非静态内部类持有了activity的引用

强引用：强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿
抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。

软应用：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内
存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。

弱引用：弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的
过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很
低的线程，因此不一定会很快发现那些只具有弱引用的对象。

采用弱引用方式消除内存泄漏

 private static class NoLeakHandler extends Handler{
        private WeakReference<NoLeakActivity> mActivity;

        public NoLeakHandler(NoLeakActivity activity){
            mActivity = new WeakReference<>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
        }
    }

或者在activity的OnDestory方法里mHandler.removeCallbacksAndMessages(null);
